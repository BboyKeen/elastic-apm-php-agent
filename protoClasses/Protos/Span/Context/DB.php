<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/spanv2.proto

namespace Protos\Span\Context;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\GPBWrapperUtils;

/**
 * Generated from protobuf message <code>protos.Span.Context.DB</code>
 */
class DB extends \Google\Protobuf\Internal\Message
{
    /**
     * Database instance name
     *
     * Generated from protobuf field <code>string instance = 1;</code>
     */
    private $instance = '';
    /**
     * A database statement (e.g. query) for the given database type
     *
     * Generated from protobuf field <code>string statement = 2;</code>
     */
    private $statement = '';
    /**
     * Database type. For any SQL database, "sql". For others, the lower-case database category, e.g. "cassandra", "hbase", or "redis"
     *
     * Generated from protobuf field <code>string type = 3;</code>
     */
    private $type = '';
    /**
     *Username for accessing database
     *
     * Generated from protobuf field <code>string user = 4;</code>
     */
    private $user = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $instance
     *           Database instance name
     *     @type string $statement
     *           A database statement (e.g. query) for the given database type
     *     @type string $type
     *           Database type. For any SQL database, "sql". For others, the lower-case database category, e.g. "cassandra", "hbase", or "redis"
     *     @type string $user
     *          Username for accessing database
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Protos\Spanv2::initOnce();
        parent::__construct($data);
    }

    /**
     * Database instance name
     *
     * Generated from protobuf field <code>string instance = 1;</code>
     * @return string
     */
    public function getInstance()
    {
        return $this->instance;
    }

    /**
     * Database instance name
     *
     * Generated from protobuf field <code>string instance = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setInstance($var)
    {
        GPBUtil::checkString($var, True);
        $this->instance = $var;

        return $this;
    }

    /**
     * A database statement (e.g. query) for the given database type
     *
     * Generated from protobuf field <code>string statement = 2;</code>
     * @return string
     */
    public function getStatement()
    {
        return $this->statement;
    }

    /**
     * A database statement (e.g. query) for the given database type
     *
     * Generated from protobuf field <code>string statement = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setStatement($var)
    {
        GPBUtil::checkString($var, True);
        $this->statement = $var;

        return $this;
    }

    /**
     * Database type. For any SQL database, "sql". For others, the lower-case database category, e.g. "cassandra", "hbase", or "redis"
     *
     * Generated from protobuf field <code>string type = 3;</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Database type. For any SQL database, "sql". For others, the lower-case database category, e.g. "cassandra", "hbase", or "redis"
     *
     * Generated from protobuf field <code>string type = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

    /**
     *Username for accessing database
     *
     * Generated from protobuf field <code>string user = 4;</code>
     * @return string
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     *Username for accessing database
     *
     * Generated from protobuf field <code>string user = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setUser($var)
    {
        GPBUtil::checkString($var, True);
        $this->user = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DB::class, \Protos\Span_Context_DB::class);

